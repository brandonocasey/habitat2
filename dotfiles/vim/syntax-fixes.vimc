"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => File Fixes
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" fixes https://github.com/neovim/neovim/issues/14433
" Default to static completion for SQL
let g:omni_sql_default_compl_type = 'syntax'
let g:omni_sql_no_default_maps = 1

" Set the syntax given the binary name that executes that file
function! SetSyntax(binaryName)
    if empty(a:binaryName)
        return
    endif
    let binarySyntax=a:binaryName
    " Correct binary names here, and add specific settings here
    if a:binaryName == "node"
        let binarySyntax="javascript"
  elseif a:binaryName == "babel-node"
    let binarySyntax="javascript"
  elseif a:binaryName == "bash"
      let g:is_bash=1
      let binarySyntax="sh"
  elseif a:binaryName == "bats"
      let g:is_bash=1
      let binarySyntax="sh"
  elseif a:binaryName == "html"
      let binarySyntax="html"
  endif
    execute "set filetype=" . binarySyntax
endfunction


" Grab the binary name from the #! and pass it to SetSyntax
function! DetectSyntax()
    if did_filetype()
        let current_file_type = &filetype
        " File types to ignore
        if current_file_type !~ '[tads]'
            return
        endif
    endif
    let binary = ""
    let line = getline(nextnonblank(1))
    let searches = ['\v^\s*#!.*\/bin\/(env\s+)?(\w+)']
    let i = 0
    while empty(binary) && i < len(searches)
      let match = matchlist(line, searches[i])
      if !empty(match)
        if match[2] == 'env'
          let binary = match[3]
        else
          let binary = match[2]
        endif
      endif

      let i = i + 1
    endwhile

    if empty(binary)
      return
    endif
    call SetSyntax(binary)
endfunction

if has("autocmd")
    autocmd BufEnter,BufWritePost * call DetectSyntax()
    " Dont do comments on a new line
    autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
    " Color Log Files if you can
    autocmd BufNewFile,BufReadPost *messages* :set filetype=messages
    autocmd BufNewFile,BufReadPost *.log :set filetype=messages

    " Treat text files like every other file when copy pasting into them
    autocmd BufRead,BufNewFile *.txt,*.tex set wrap linebreak nolist textwidth=0 wrapmargin=0

    " cursorline/cursor column slow down ruby :(
    autocmd BufNewFile,BufRead *.vimc,*.vimp,*.nvimc,*.nvimp set syntax=vim
    autocmd BufNewFile,BufRead *.html call SetSyntax('html')
    autocmd BufNewFile,BufRead *.rb set syntax=ruby nocursorline nocursorcolumn
    autocmd BufNewFile,BufRead *.coffee set syntax=coffee nocursorline nocursorcolumn
    autocmd BufNewFile,BufRead *.shell,*.sh,*.bats,*.bash call SetSyntax('bash')
    autocmd BufNewFile,BufRead *.ts set syntax=disabled re=2
endif

" man page support
" runtime! ftplugin/man.vim
